@page "/template-viewer"
@inject HttpClient Http
@using Calcpad.TemplateServer.Models
@using Calcpad.TemplateServer.Components

<h3>📂 Template Viewer</h3>

@if (treeNodes == null)
{
    <p>⏳ Lade Templates...</p>
}
else if (treeNodes.Count == 0)
{
    <p>⚠️ Keine Templates gefunden.</p>
}
else
{
    <p>✔️ Anzahl Templates: @treeNodes.Count</p>
    <TreeView Nodes="treeNodes" />
}

@code {
    private List<TreeNode> treeNodes = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Lade die API-Daten (TreeNode-Daten).
            var apiData = await Http.GetFromJsonAsync<List<TreeNode>>("api/templates/tree");

            if (apiData == null || !apiData.Any())
            {
                Console.WriteLine("❌ API hat NULL oder leere Daten zurückgegeben!");
                return;
            }

            // Baue den Baum aus der API-Antwort.
            treeNodes = BuildTreeFromApiResponse(apiData);

            Console.WriteLine($"✔️ {treeNodes.Count} Templates geladen.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Fehler beim Laden der Templates: {ex.Message}");
        }
    }

    // Methode zur Rekursion von Knoten
    private List<TreeNode> BuildTreeFromApiResponse(List<TreeNode> apiData)
    {
        var rootNodes = new List<TreeNode>();

        foreach (var node in apiData)
        {
            var treeNode = new TreeNode(node.Name);
            BuildChildren(node, treeNode);
            rootNodes.Add(treeNode);
        }

        return rootNodes;
    }

    private void BuildChildren(TreeNode apiNode, TreeNode treeNode)
    {
        foreach (var child in apiNode.Children)
        {
            var childNode = new TreeNode(child.Name);
            treeNode.Children.Add(childNode);
            BuildChildren(child, childNode); // Rekursiv alle Kinder hinzufügen
        }
    }
}
